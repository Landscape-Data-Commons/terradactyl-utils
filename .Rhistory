terradat <- build_indicators(header = paste0(dsn_tall,"header.Rdata"),
dsn = dsn,
source = "TerrADat",
lpi_tall = paste0(dsn_tall,"lpi_tall.Rdata"),
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall.Rdata"),
gap_tall = paste0(dsn_tall, "gap_tall.Rdata"),
soil_stability_tall = paste0(dsn_tall_empty, "soil_stability_tall.Rdata"),
height_tall = paste0(dsn_tall, "height_tall.Rdata"),
species_file = dsn,
SpeciesState == "ID")
### ERROR HERE
###
h <- gather_header(dsn = dsn, source = "terradat")
testlpi <- lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
testspp <- spp_inventory_calc(
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat"
)
testgap <- terradactyl::gap_calc(header = h, gap_tall = paste0(dsn_tall, "gap_tall.Rdata"))
g <- readRDS(paste0(dsn_tall, "gap_tall.Rdata"))
g$Measure
g$PrimaryKey
g$PrimaryKey %in% h$PrimaryKey %>% sum # this is the problem with gap. no overlap
l <- readRDS(paste0(dsn_tall,"lpi_tall.Rdata"))
l$PrimaryKey %in% h$PrimaryKey %>% sum
testheight <- height_calc(
header = h,
height_tall = paste0(dsn_tall, "height_tall.Rdata"),
species_file = dsn,
source = "TerrADat")
ht <- readRDS(paste0(dsn_tall, "height_tall.Rdata"))
testsoilstab <- soil_stability_calc(
header = h,
soil_stability_tall = paste0(dsn_tall, "soil_stability_tall.Rdata"))
ss <- readRDS(paste0(dsn_tall, "soil_stability_tall.Rdata"))
ss$PrimaryKey %in% h$PrimaryKey %>% sum() # no overlap here either
### now try running only with published functions
rm(list=lsf.str())
lpi <- readRDS(paste0(dsn_tall, "lpi_tall2.Rdata"))
rm(lpi)
lpi <- readRDS(paste0(dsn_tall, "lpi_tall2.Rdata")) %>%
mutate(SpeciesState, recode("", NA))
lpi <- readRDS(paste0(dsn_tall, "lpi_tall2.Rdata")) %>%
mutate(ShrubShape, recode("", NA))
lpi <- readRDS(paste0(dsn_tall, "lpi_tall2.Rdata")) %>%
mutate(ShrubShape = recode(ShrubShape, "" = NA))
lpi <- readRDS(paste0(dsn_tall, "lpi_tall2.Rdata"))
recode(lpi$ShrubShape, "" = NA)
recode(lpi$ShrubShape, NA = "")
recode(lpi$ShrubShape, "" = " ")
recode(lpi$ShrubShape, "" = NA)
lpi <- readRDS(paste0(dsn_tall, "lpi_tall.Rdata"))
lpi[lpi$ShrubShape == "", ShrubShape] <- NA
lpi[lpi$ShrubShape == "", "ShrubShape"] <- NA
saveRDS(lpi %>% select(!SpeciesState),
paste0(dsn_tall,"lpi_tall2.Rdata"))
testlpi <- lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
lpi$ShrubShape %>% recode(., NA = "")
saveRDS(lpi %>% select(!SpeciesState),
paste0(dsn_tall,"lpi_tall2.Rdata"))
testlpi
testlpi <- terradactyl::lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
lpi <- readRDS(paste0(dsn_tall, "lpi_tall.Rdata")) %>%
select(!SpeciesState) %>%
mutate(ShrubShape = recode(SHrubShape, NA = ""))
lpi <- readRDS(paste0(dsn_tall, "lpi_tall.Rdata")) %>%
select(!SpeciesState)
lpi <- readRDS(paste0(dsn_tall, "lpi_tall.Rdata")) %>%
select(!SpeciesState) %>%
mutate(ShrubShape = na_if(SHrubShape, ""))
lpi <- readRDS(paste0(dsn_tall, "lpi_tall.Rdata")) %>%
select(!SpeciesState) %>%
mutate(ShrubShape = na_if(ShrubShape, ""))
lpi$ShrubShape
saveRDS(lpi,
paste0(dsn_tall,"lpi_tall2.Rdata"))
testlpi <- terradactyl::lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
testlpi <- terradactyl::lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
testspp <- terradactyl::spp_inventory_calc(
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat"
)
spp <- readRDS(paste0(dsn_tall, "spp_inventory_tall.Rdata")) %>%
select(!SpeciesState)
spp <- readRDS(paste0(dsn_tall, "spp_inventory_tall.Rdata")) %>%
select(!SpeciesState)
saveRDS(spp, paste0(dsn_tall, "spp_inventory_tall2.Rdata"))
testlpi <- terradactyl::lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
testspp <- terradactyl::spp_inventory_calc(
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat"
)
spp_clean <-
readRDS(paste0(dsn_tall, "spp_inventory_tall.Rdata")) %>%
select(!SpeciesState)
saveRDS(spp_clean, paste0(dsn_tall, "spp_inventory_tall2.Rdata"))
testspp <- terradactyl::spp_inventory_calc(
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat"
)
testgap <- terradactyl::gap_calc(header = h, gap_tall = paste0(dsn_tall, "gap_tall.Rdata"))
l <- readRDS(paste0(dsn_tall,"lpi_tall.Rdata"))
l$PrimaryKey %in% h$PrimaryKey %>% sum
testheight <- height_calc(
header = h,
height_tall = paste0(dsn_tall, "height_tall.Rdata"),
species_file = dsn,
source = "TerrADat")
ht <- readRDS(paste0(dsn_tall, "height_tall.Rdata"))
testsoilstab <- soil_stability_calc(
header = h,
soil_stability_tall = paste0(dsn_tall, "soil_stability_tall.Rdata"))
ss <- readRDS(paste0(dsn_tall, "soil_stability_tall.Rdata"))
ss$PrimaryKey %in% h$PrimaryKey %>% sum() # no overlap here either
h
gather_header(dsn = dsn, source = "TerrADat")
?gather_header
## where are these pkeyts coming from
p <- sf::st_read(dsn = dsn, layer = "tblPlots")
p$PrimaryKey
#####################
## Step One: Prep data space
#basePath<-"Q:\\loc\\other\\Sagegrouse_Implementation\\GIS\\HAF\\IDAHO_Site_Scale\\2021\\forIngestion\\plotData\\"
basePath <- "C:\\Users\\jrbrehm\\Documents\\Data\\Specific Projects\\Tall Tables JENE 21-10-27\\"
#input gdb - must exist
#dsn<-paste0(basePath,"Shoshone\\Idaho_AIMStrategy_SFOstaging.gdb")
# dsn <- "C:\\Users\\jrbrehm\\Documents\\Data\\AIM-LMF\\AIMLMFSubset.gdb"
dsn <- "C:\\Users\\jrbrehm\\Documents\\GitHub\\terradactyl-workspace-2\\troubleshooting jennifer nelson 21-10-27\\Idaho_AIMStrategy_SFOstaging.gdb"
#folder for tall data files - must exist
#dsn_tall<-paste0(basePath,"Shoshone\\tall\\")
dsn_tall <- basePath
#folder with empty tall files for gap & soil stability in case the methods were not collected
dsn_tall_empty<-paste0(basePath,"_tall_empty\\")
#final gdb - does not need to exist
dsn_out<-paste0(basePath,"Shoshone\\Idaho_AIMStrategy_SFOcalcs.gdb")
#####################
## Step Two: gather LPI into tall formats
#Gap
test<-suppressWarnings(sf::st_read(dsn=dsn,layer="tblGapHeader"))
if(nrow(test)>0){
gap_tall <- gather_gap_terradat(dsn = dsn)
#saveRDS(gap_tall2,
saveRDS(gap_tall,
file = paste(dsn_tall, "gap_tall.Rdata", sep =""))
}else{file.copy(from=paste0(dsn_tall_empty, "gap_tall.Rdata"), to=paste0(dsn_tall, "gap_tall.Rdata"), overwrite=T)}
# LPI
lpi <- gather_lpi_terradat(dsn = dsn)
lpi$source <- rep("TerrADat", nrow(lpi))
lpi$SpeciesState <- rep("ID", nrow(lpi))
saveRDS(lpi,
file = paste(dsn_tall,"lpi_tall.Rdata", sep = ""))
# Height
height <- gather_height_terradat(dsn = dsn)
height$source <- rep("TerrADat", nrow(height))
height$SpeciesState <- rep("ID", nrow(height))
saveRDS(height,
file = paste(dsn_tall, "height_tall.Rdata", sep = ""))
# Species inventory
spp_inventory <- gather_species_inventory_terradat(dsn = dsn)
spp_inventory$source <- rep("TerrADat", nrow(spp_inventory))
spp_inventory$SpeciesState <- rep("ID", nrow(spp_inventory))
saveRDS(spp_inventory,
file = paste(dsn_tall, "spp_inventory_tall.Rdata", sep = ""))
# header
header <- gather_header_terradat(dsn = dsn)
header$DateVisited <- NA
header$source <- rep("TerrADat", nrow(header))
saveRDS(header,
file = paste(dsn_tall, "header.Rdata", sep = ""))
### opening layer failed
### skip, it says optional
sf::st_layers(dsn)
list.files()
terradactyl::species_list_check(dsn_tall = dsn_tall,
species_list_file = dsn,
SpeciesState == "ID"
)
# opening layer failed
## check that files exist
list.files(path = dsn_tall)
### ERRORS START HERE ####
## jene says the error is in lpi_calc
source("C:\\Users\\jrbrehm\\Documents\\GitHub\\terradactyl-workspace-2\\aim_gdb_edit.R")
source("C:\\Users\\jrbrehm\\Documents\\GitHub\\terradactyl-workspace-2\\shrub.shape_edit.R")
source("C:\\Users\\jrbrehm\\Documents\\GitHub\\terradactyl-workspace-2\\accumulated_species_edit.R")
source("C:\\Users\\jrbrehm\\Documents\\GitHub\\terradactyl-workspace-2\\gap_cover_edit.R")
#####
terradat <- build_indicators(header = paste0(dsn_tall,"header.Rdata"),
dsn = dsn,
source = "TerrADat",
lpi_tall = paste0(dsn_tall,"lpi_tall.Rdata"),
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall.Rdata"),
gap_tall = paste0(dsn_tall, "gap_tall.Rdata"),
soil_stability_tall = paste0(dsn_tall_empty, "soil_stability_tall.Rdata"),
height_tall = paste0(dsn_tall, "height_tall.Rdata"),
species_file = dsn,
SpeciesState == "ID")
h <- gather_header(dsn = dsn, source = "terradat")
testlpi <- lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
testspp <- spp_inventory_calc(
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat"
)
testgap <- terradactyl::gap_calc(header = h, gap_tall = paste0(dsn_tall, "gap_tall.Rdata"))
gap_tall <- gather_gap_terradat(dsn = dsn)
#####################
## Step Two: gather LPI into tall formats
#Gap
test<-suppressWarnings(sf::st_read(dsn=dsn,layer="tblGapHeader"))
dsn
sf::st_layers(dsn)
#####################
## Step Two: gather LPI into tall formats
#Gap
test<-suppressWarnings(sf::st_read(dsn=dsn,layer="tblGapHeader"))
gap_tall <- gather_gap_terradat(dsn = dsn)
h <- gather_header(dsn = dsn, source = "terradat")
testlpi <- lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
### now try running only with published functions ####
rm(list=lsf.str())
# isnt going to work
test <- terradactyl::build_indicators(header = paste0(dsn_tall,"header.Rdata"),
dsn = dsn,
source = "TerrADat",
lpi_tall = paste0(dsn_tall,"lpi_tall.Rdata"),
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall.Rdata"),
gap_tall = paste0(dsn_tall, "gap_tall.Rdata"),
soil_stability_tall = paste0(dsn_tall_empty, "soil_stability_tall.Rdata"),
height_tall = paste0(dsn_tall, "height_tall.Rdata"),
species_file = dsn,
SpeciesState == "ID")
h <- gather_header(dsn = dsn, source = "terradat")
lpi <- readRDS(paste0(dsn_tall, "lpi_tall.Rdata")) %>%
select(!SpeciesState) %>%
mutate(ShrubShape = na_if(ShrubShape, ""))
saveRDS(lpi,
paste0(dsn_tall,"lpi_tall2.Rdata"))
testlpi <- terradactyl::lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
spp_clean <-
readRDS(paste0(dsn_tall, "spp_inventory_tall.Rdata")) %>%
select(!SpeciesState)
saveRDS(spp_clean, paste0(dsn_tall, "spp_inventory_tall2.Rdata"))
testspp <- terradactyl::spp_inventory_calc(
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat"
)
testgap <- terradactyl::gap_calc(header = h, gap_tall = paste0(dsn_tall, "gap_tall.Rdata"))
g <- readRDS(paste0(dsn_tall, "gap_tall.Rdata"))
g$Measure
g$PrimaryKey
g$PrimaryKey %in% h$PrimaryKey %>% sum # this is the problem with gap. no overlap
l <- readRDS(paste0(dsn_tall,"lpi_tall.Rdata"))
l$PrimaryKey %in% h$PrimaryKey %>% sum
testheight <- height_calc(
header = h,
height_tall = paste0(dsn_tall, "height_tall.Rdata"),
species_file = dsn,
source = "TerrADat")
ht <- readRDS(paste0(dsn_tall, "height_tall.Rdata"))
testsoilstab <- soil_stability_calc(
header = h,
soil_stability_tall = paste0(dsn_tall, "soil_stability_tall.Rdata"))
ss <- readRDS(paste0(dsn_tall, "soil_stability_tall.Rdata"))
ss$PrimaryKey %in% h$PrimaryKey %>% sum() # no overlap here either
## where are these pkeyts coming from
p <- sf::st_read(dsn = dsn, layer = "tblPlots")
p$PrimaryKey
# isnt going to work
test <- terradactyl::build_indicators(header = paste0(dsn_tall,"header.Rdata"),
dsn = dsn,
source = "TerrADat",
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall2.Rdata"),
gap_tall = paste0(dsn_tall, "gap_tall.Rdata"),
soil_stability_tall = paste0(dsn_tall_empty, "soil_stability_tall.Rdata"),
height_tall = paste0(dsn_tall, "height_tall.Rdata"),
species_file = dsn,
SpeciesState == "ID")
readRDS(paste0(dsn_tall, gap_tall.Rdata))
readRDS(paste0(dsn_tall, "gap_tall.Rdata"))
gather_lpi(dsn = dsn, source = "terradat")
testlpi <- terradactyl::lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn
)
terradactyl::height_calc(
header = h,
height_tall = paste0(dsn_tall, "height_tall.Rdata"),
species_file = dsn,
source = "TerrADat")
terradactyl::soil_stability_calc(
header = h,
soil_stability_tall = paste0(dsn_tall, "soil_stability_tall.Rdata"))
terradactyl::gap_calc(header = h, gap_tall = paste0(dsn_tall, "gap_tall.Rdata"))
#####################
## Step One: Prep data space
#basePath<-"Q:\\loc\\other\\Sagegrouse_Implementation\\GIS\\HAF\\IDAHO_Site_Scale\\2021\\forIngestion\\plotData\\"
basePath <- "C:\\Users\\jrbrehm\\Documents\\Data\\Specific Projects\\Tall Tables JENE 21-10-27\\"
#input gdb - must exist
#dsn<-paste0(basePath,"Shoshone\\Idaho_AIMStrategy_SFOstaging.gdb")
# dsn <- "C:\\Users\\jrbrehm\\Documents\\Data\\AIM-LMF\\AIMLMFSubset.gdb"
dsn <- "C:\\Users\\jrbrehm\\Documents\\GitHub\\terradactyl-workspace-2\\troubleshooting jennifer nelson 21-10-27\\Idaho_AIMStrategy_SFOstaging.gdb"
#folder for tall data files - must exist
#dsn_tall<-paste0(basePath,"Shoshone\\tall\\")
dsn_tall <- basePath
#folder with empty tall files for gap & soil stability in case the methods were not collected
dsn_tall_empty<-paste0(basePath,"_tall_empty\\")
#final gdb - does not need to exist
dsn_out<-paste0(basePath,"Shoshone\\Idaho_AIMStrategy_SFOcalcs.gdb")
## adjust data
lpi_clean <- readRDS(paste0(dsn_tall, "lpi_tall.Rdata")) %>%
select(!SpeciesState) %>%
mutate(ShrubShape = na_if(ShrubShape, ""))
saveRDS(lpi_clean, paste0(dsn_tall,"lpi_tall2.Rdata"))
spp_clean <-
readRDS(paste0(dsn_tall, "spp_inventory_tall.Rdata")) %>%
select(!SpeciesState)
saveRDS(spp_clean, paste0(dsn_tall, "spp_inventory_tall2.Rdata"))
## run individual calcs
#  header data frame must be loaded into environment for these
h <- gather_header(dsn = dsn, source = "terradat")
lpi_indicators <- terradactyl::lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn)
spp_indicators <- terradactyl::spp_inventory_calc(
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat")
## run individual calcs
#  header data frame must be loaded into environment for these
h <- terradactyl::gather_header(dsn = dsn, source = "terradat")
lpi_indicators <- terradactyl::lpi_calc(
lpi_tall = paste0(dsn_tall,"lpi_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat",
dsn = dsn)
spp_indicators <- terradactyl::spp_inventory_calc(
spp_inventory_tall = paste0(dsn_tall,"spp_inventory_tall2.Rdata"),
header = h,
species_file = dsn,
source = "TerrADat")
forget_who <- function(data){
out <- data %>% dplyr::select_if(!(names(.) %in% c("Observer", "Recorder", "observer", "recorder")))
return(out)
}
ss
lpi$Observer
forget_who(lpi)
#' Remove observer and recorder from a table
#'
#' @description Given a table, return it without observer, recorder, data enterer, or data checker
#' @param data The table to edit
#' @return A table without observer or recorder
forget_who <- function(data){
out <- data %>%
dplyr::select_if(!(names(.) %in% c("Observer", "Recorder", "DataEntry", "DataErrorCheck")))
return(out)
}
forget_who(lpi)
#' Remove observer and recorder from a table
#'
#' @description Given a table, return it without observer, recorder, data enterer, or data checker
#' @param data The table to edit
#' @return A table without observer or recorder
forget_who <- function(data){
out <- data %>%
dplyr::select_if(!(names(.) %in% c("Observer", "Recorder", "DataEntry", "DataErrorChecking")))
return(out)
}
forget_who(lpi)
#' Fetch DIMA data from the Landscape Data Commons API (requires internet connection)
#'
#' @description Given a table name and optional field query, download DIMA data from the API.
#' @param endpoint Character string or list. Name of the requested table e.g. "tblPlots".
#' Provide a list of character strings to download more than one table.
#' @param values Optional. JSON query as character string. If a list of endpoints is provided, the filter column must be present in all requested tables.
#' @param verbose If true, print the URL of the requested record.
#' @return A data frame containing DIMA data of the requested table, or a list
#' of data frames containing the requested tables.
#' @examples
#' data_allplots <- fetch_api(endpoint = "tblPlots", values = NULL)
#'
#' data_JERplots <- fetch_api(endpoint = "tblPlots", values = "ProjectKey=JER")
#'
#' data_gap <- fetch_api(endpoint = list("tblGapHeader", "tblGapDetail"),
#'                        values = "PrimaryKey=15050113465465692020-09-15")
## Fetch data for a single table
#' @rdname fetch_api
#' @export fetch_api_single
fetch_api_single <- function(api, endpoint, values = NULL, verbose = T){
if(is.null(values)){
url <- paste0("https://", api, ".landscapedatacommons.org/api/",endpoint)
} else {
url <- paste0("https://", api, ".landscapedatacommons.org/api/",endpoint,"?",values)
}
if(verbose) print(paste("Accessing", url))
get_url <- httr::GET(url)
flat_get <- httr::content(get_url, "text", encoding = "UTF-8")
jsonize <- jsonlite::fromJSON(flat_get, flatten = TRUE)
df <- as.data.frame(jsonize)
return(df)
}
## wrapper, automatically detecting if multiple tables are requested
#' @export fetch_api
#' @rdname fetch_api
fetch_api <- function(api, endpoint, values=NULL) {
api <- tolower(api)
if(class(endpoint) == "list"){
print(paste("Fetching", length(endpoint), "tables"))
out <- lapply(endpoint, fetch_api_single, values = values, api = api)
names(out) <- endpoint
} else {
out <- fetch_api_single(endpoint = endpoint, values = values, api = api)
}
return(out)
}
#' Remove observer and recorder from a table
#'
#' @description Given a table, return it without observer, recorder, data enterer, or data checker
#' @param data The table to edit
#' @return A table without observer or recorder
forget_who <- function(data){
out <- data %>%
dplyr::select_if(!(names(.) %in% c("Observer", "Recorder", "DataEntry", "DataErrorChecking")))
return(out)
}
devtools::build()
setwd("C:\Users/jrbrehm/Documents/GitHub/terradactyl-utils")
setwd("C:/Users/jrbrehm/Documents/GitHub/terradactyl-utils")
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
??github_install
??install_github
devtools::install_github(repo = "landscape-data-commons/terradactutyls")
devtools::install_github(repo = "landscape-data-commons/terradactutyls")
